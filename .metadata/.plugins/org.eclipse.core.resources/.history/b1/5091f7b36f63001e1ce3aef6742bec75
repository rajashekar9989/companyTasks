package com.portal.ScanPdf.controller;

import org.apache.commons.logging.Log;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.apache.tomcat.util.net.jsse.PEMFile;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;

import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator;

@RestController
public class ExtractQRCodes {

	@PostMapping("/read-qr-codes")
	public ResponseEntity<List<String>> extractQRCodesFromPDF(@RequestParam("pdfFile") MultipartFile pdfFile) {
		try {
			// Load the PDF document
			PDDocument document = PDDocument.load(pdfFile.getInputStream());
			System.out.println("document -> " + document.getNumberOfPages());
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			System.out.println("pdfRenderer -> " + pdfRenderer);

			List<String> qrCodeDataList = new ArrayList<>();

			for (int page = 0; page < document.getNumberOfPages(); page++) {

				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300);

				// Extract QR codes from the image

				List<String> qrCodesInPage = extractQRCodeDataFromImage(image);
				qrCodeDataList.addAll(qrCodesInPage);

			}

			document.close();

			return new ResponseEntity<>(qrCodeDataList, HttpStatus.OK);
		} catch (IOException e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	private List<String> extractQRCodeDataFromImage(BufferedImage image) throws IOException {

		List<String> qrCodeDataList = new ArrayList<>();

		LuminanceSource source = new BufferedImageLuminanceSource(image);

		BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

		try {

			Result result = new MultiFormatReader().decode(bitmap);
			
			String[] jwtArrayData = (result.getText()).split("\\.");
			System.out.println("## JWT 0 -> " + jwtArrayData[0]);
			System.out.println("## JWT 1-> " + jwtArrayData[1]);
			System.out.println("## JWT 2-> " + jwtArrayData[2]);

			byte[] data = Base64.getDecoder().decode(jwtArrayData[1]);

			String content = new String(data, "UTF-8");

			// Log.i("# qr data ->", content);

			System.out.println(content);
			
			//calling the  below getPemPublicKey methods.

			getPemPublicKey(jwtArrayData[0], jwtArrayData[1], jwtArrayData[2]);
			
			
               qrCodeDataList.add(result.getText());

		} catch (NotFoundException e) {

			// e.printStackTrace();

		}

		return qrCodeDataList;
	}

	public PublicKey getPemPublicKey(String key1, String key2, String key3) {
		try {
			URL resource = getClass().getClassLoader().getResource("einvoice_2022_public.pem");
			
			//call the RSA CLASS getPublicKey Method.
			
			
			
			RSA.getPublicKey("/resources/staic/einvoice_2022_public.pem");
			
			File ff = new File(resource.toURI());

			String key = new String(Files.readAllBytes(ff.toPath()), Charset.defaultCharset());

			System.out.println("key => " + key);

			String publicKeyPEM = key.replace("-----BEGIN PUBLIC KEY-----", "").replaceAll(System.lineSeparator(), "")
					.replace("-----END PUBLIC KEY-----", "");

			System.out.println("publicKeyPEM => " + publicKeyPEM);

			byte[] encoded = Base64.getDecoder().decode(publicKeyPEM);

			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
			
			

			RSAPublicKey pub = (RSAPublicKey) keyFactory.generatePublic(keySpec);
			
			
			
	SignatureAlgorithm sa = SignatureAlgorithm.RS256;
			
			SecretKeySpec secretKeySpec = new SecretKeySpec(pub.getEncoded(), sa.getJcaName());

			DefaultJwtSignatureValidator validator = new DefaultJwtSignatureValidator(sa, secretKeySpec);
			
	
			
			if (!validator.isValid(key1 + "." + key2, key3)) {
				new Exception("Could not verify JWT token integrity!");
			}

			System.out.println(" SUccessfully enerated publickey !!!!");
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;

	}

}
