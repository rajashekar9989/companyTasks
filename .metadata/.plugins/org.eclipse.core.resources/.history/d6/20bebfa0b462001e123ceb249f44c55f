package com.portal.ScanPdf.controller;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

@RestController
public class ExtractQRCodes {

	@PostMapping("/read-qr-codes")
	public ResponseEntity<List<String>> extractQRCodesFromPDF(@RequestParam("pdfFile") MultipartFile pdfFile) {
		try {
			// Load the PDF document
			PDDocument document = PDDocument.load(pdfFile.getInputStream());
			PDFRenderer pdfRenderer = new PDFRenderer(document);

			List<String> qrCodeDataList = new ArrayList<>();

			for (int page = 0; page < document.getNumberOfPages(); page++) {
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300);

				// Extract QR codes from the image
				List<String> qrCodesInPage = extractQRCodeDataFromImage(image);
				qrCodeDataList.addAll(qrCodesInPage);
			}

			document.close();

			return new ResponseEntity<>(qrCodeDataList, HttpStatus.OK);
		} catch (IOException e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@SuppressWarnings("unchecked")
	private List<String> extractQRCodeDataFromImage(BufferedImage image) throws IOException {
		List<String> qrCodeDataList = new ArrayList<>();

		LuminanceSource source = new BufferedImageLuminanceSource(image);
		BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

		try {
			Result result = new MultiFormatReader().decode(bitmap);
			qrCodeDataList.add(result.getText());
		
		}
		 catch (NotFoundException e) {
		
		  // e.printStackTrace();
			 
		}
		
		

		return qrCodeDataList;
	}
}
