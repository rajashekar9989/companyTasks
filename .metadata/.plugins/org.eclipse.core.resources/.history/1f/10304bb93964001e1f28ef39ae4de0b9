package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.File;

import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;

import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.RAW);
			requestPayload.setInputType(Enums.InputType.PDFFILE);
			requestPayload.setSignValidata(true);

			QRCodeExtractor qrcode = new QRCodeExtractor();

			qrcode.acceptDataFromUser(requestPayload);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static String decodeQRCode(BufferedImage image) {
		try {
			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

			Result result = new MultiFormatReader().decode(bitmap);

			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			return null;
		}

	}

	private ResponseData acceptDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();
		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {
			// QR Code case
			responseData = validateQr(reqpayload);
		} else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private ResponseData validateQr(RequestPayload reqpayload) {
		ResponseData responseData = new ResponseData();
		if (Enums.DocType.E_INVOICE.equals(reqpayload.getDocType())) {
			// Einvoice case
			responseData = validateScanType(reqpayload);
		} else {
			// other doctypes
			responseData.setStatus(1);
			responseData.setMessage("Only E-Invoice doctypes are handled!! ");
		}
		return responseData;
	}

	private ResponseData validateScanType(RequestPayload reqpayload) {
		ResponseData responseData = new ResponseData();
		if (Enums.ScanData.RAW.equals(reqpayload.getScandata())) {
			// Raw scan case
			 responseData = scanData(reqpayload);
		} else {
			// Decoded scan case
		}
		return responseData;
	}

	private ResponseData scanData(RequestPayload requestPayload) {
		
		if (Enums.InputType.PDFFILE.equals(requestPayload.getInputType())) {
			try {
				File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
				// PDDocument document = PDDocument.load(sourceFile);
				PDDocument document = Loader.loadPDF(sourceFile);
				PDFRenderer pdfRenderer = new PDFRenderer(document);
				// Loop through each page in the PDF
				for (int page = 0; page < document.getNumberOfPages(); ++page) {
					// Render the page as an image
					BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
					// Decode QR code from the image
					String qrCodeData = decodeQRCode(image);
					if (qrCodeData != null) {
						System.out.println("Page " + (page + 1) + ": QR Code Data: " + qrCodeData);
					} else {
						System.out.println("Page " + (page + 1) + ": No QR Code found on this page.");
					}
				}

				// Close the PDF document
				document.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())) {

		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {

		}
		return null;

	}

}
