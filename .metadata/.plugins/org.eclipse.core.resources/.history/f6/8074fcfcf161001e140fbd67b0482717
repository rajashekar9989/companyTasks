package com.portal.ScanPdf.controller;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.google.zxing.Result;

import javax.imageio.ImageIO;

@RestController
public class ScanPdf {
    @PostMapping("/scanQRCode")
    public String scanQRCode(@RequestParam("file") MultipartFile file) {
        try {
            // Read the PDF file
            InputStream pdfInputStream = file.getInputStream();
            PDDocument document = PDDocument.load(pdfInputStream);

            // Extract text from PDF
            PDFTextStripper pdfTextStripper = new PDFTextStripper();
            String pdfText = pdfTextStripper.getText(document);

            // Close the PDF document
            document.close();

            // Perform QR code scanning on the extracted text
            List<String> qrCodeContents = scanQRCodeInText(pdfText);

            // Return QR code contents (if found)
            if (!qrCodeContents.isEmpty()) {
                return String.join("\n", qrCodeContents);
            } else {
                return "No QR codes found in the PDF.";
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error processing the PDF file.";
        }
    }

    
   

    private List<String> scanQRCodeInText(String text) {
        List<String> qrCodeContents = new ArrayList<>();

        // Split the text into lines
        
        String[] lines = text.split("\n");

        // Create hints for the QR code reader
        Map<DecodeHintType, Object> hints = new HashMap<>();
        
        hints.put(DecodeHintType.POSSIBLE_FORMATS, BarcodeFormat.QR_CODE);

        // Initialize the QR code reader
        MultiFormatReader reader = new MultiFormatReader();

        // Iterate through each line and attempt to decode QR codes
        for (String line : lines) {
            try {
                // Convert the line into a BufferedImage
                byte[] lineBytes = line.getBytes();
                ByteArrayInputStream inputStream = new ByteArrayInputStream(lineBytes);
                BufferedImage bufferedImage = ImageIO.read(inputStream);

                // Create a BinaryBitmap from the BufferedImage
                BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(
                        new BufferedImageLuminanceSource(bufferedImage)));

                // Decode the QR code
                Result result = reader.decode(binaryBitmap, hints);

                // Add the decoded QR code content to the list
                qrCodeContents.add(result.getText());
            } catch (NotFoundException | IOException e) {
                // QR code not found in this line, or an error occurred during decoding
                // You can log the error if needed
                e.printStackTrace();
            }
        }

        return qrCodeContents;
    }

}
