package com.portal.ScanPdf.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@RestController
public class ExtractQRCodes {

	@PostMapping("/read-qr-codes")
	public ResponseEntity<List<String>> extractQRCodesFromPDF(@RequestParam("pdfFile") MultipartFile pdfFile) {
		try {
			// Load the PDF document
			PDDocument document = PDDocument.load(pdfFile.getInputStream());
			System.out.println("document -> " + document.getNumberOfPages());
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			System.out.println("pdfRenderer -> " + pdfRenderer);

			List<String> qrCodeDataList = new ArrayList<>();

			for (int page = 0; page < document.getNumberOfPages(); page++) {

				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300);

				// Extract QR codes from the image

				List<String> qrCodesInPage = extractQRCodeDataFromImage(image);
				qrCodeDataList.addAll(qrCodesInPage);

			}

			document.close();

			return new ResponseEntity<>(qrCodeDataList, HttpStatus.OK);
		} catch (IOException e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	public List<String> extractQRCodeDataFromImage(BufferedImage image) throws IOException {

		List<String> qrCodeDataList = new ArrayList<>();

		LuminanceSource source = new BufferedImageLuminanceSource(image);

		BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

		try {

			Result result = new MultiFormatReader().decode(bitmap);

			String[] jwtArrayData = (result.getText()).split("\\.");
			System.out.println("## JWT 0 -> " + jwtArrayData[0]);
			System.out.println("## JWT 1-> " + jwtArrayData[1]);
			System.out.println("## JWT 2-> " + jwtArrayData[2]);

			byte[] data = Base64.getDecoder().decode(jwtArrayData[1]);

			String content = new String(data, "UTF-8");

//			getPemPublicKey(jwtArrayData[0], jwtArrayData[1], jwtArrayData[2]);

			RSAPublicKey pub = getLocalPublicKey();
			boolean valid = validateToken(pub, result.getText());

			System.out.println(" is token valid =>> " + valid);

			qrCodeDataList.add(result.getText());

		} catch (NotFoundException e) {
			e.printStackTrace();
		}
		return qrCodeDataList;
	}

	public PublicKey getPemPublicKey(String key1, String key2, String key3) {

		try {
			URL resource = getClass().getClassLoader().getResource("einvoice_2022_public.pem");

			// String filename
			// =getClass().getClassLoader().getResource("einvoice_2022_public.pem");

			// call the RSA CLASS getPublicKey Method.

			RSAPublicKey pubkey = RSA.getPublicKey("einvoice_2022_public.pem");

			File ff = new File(resource.toURI());

			String key = new String(Files.readAllBytes(ff.toPath()), Charset.defaultCharset());

			System.out.println("key => " + key);

			String publicKeyPEM = key.replace("-----BEGIN PUBLIC KEY-----", "").replaceAll(System.lineSeparator(), "")
					.replace("-----END PUBLIC KEY-----", "");

			System.out.println("publicKeyPEM => " + publicKeyPEM);

			byte[] encoded = Base64.getDecoder().decode(publicKeyPEM);

			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);

			// get RSA public key
			RSAPublicKey publickey = (RSAPublicKey) keyFactory.generatePublic(keySpec);

			// validate RSA PUBLIC key

			String jwtToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IkI4RDYzRUNCNThFQTVFNkY0QUFDM0Q1MjQ1NDNCMjI0NjY2OUIwRjgiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJ1TlkteTFqcVhtOUtyRDFTUlVPeUpHWnBzUGcifQ.eyJkYXRhIjoie1wiU2VsbGVyR3N0aW5cIjpcIjM2QUFBQ1Q1MTMxQTFaWVwiLFwiQnV5ZXJHc3RpblwiOlwiMzZBQVJQTjczMTlMM1pYXCIsXCJEb2NOb1wiOlwiNzQ0MjQ1MzY1XCIsXCJEb2NUeXBcIjpcIklOVlwiLFwiRG9jRHRcIjpcIjE4LzA1LzIwMjNcIixcIlRvdEludlZhbFwiOjc4OTIuMTIsXCJJdGVtQ250XCI6MixcIk1haW5Ic25Db2RlXCI6XCI4NTE3NjI5MFwiLFwiSXJuXCI6XCIwZGI5ZmU3NWZlNDAwMzE0ZjhhNDI4NTFlNjYyODAyNTYyMWIxMDMwYWRiMzc2MDA1ZTljYWU4OWIzOTVmMjg4XCIsXCJJcm5EdFwiOlwiMjAyMy0wNS0xOCAxNTo1MzowMFwifSIsImlzcyI6Ik5JQyJ9.n0YON87_lVHBfWN-QJwwPDRc-fubtUhOqxYdCWcVM_luyzTQyfHpeiJy0O9tC_OLTe2KnS8-aPkKTdoAfFf8pnls1ov0jjmLGUG7C_7wwFwrrUgpE3tDV39L4dR1qb6wr14m6EP8bzJeXu4F0aVL8rXOy1_YkFBibyiROYiDoI0kWe09ghlH6YqfJEdpdbiqSb5eJesJg0YNGySxAo8s-QjAOjI-YGTBeUlMuDO_qQG6YZX0a_pjm2S5o-LTdw_b-qhY_IMHEgelWxEpRiD-kVb1q1TH_sxaW2y-pKfNJROLlG5nHC26LzG8MTO3rF4sK8D2gwNBMRlKU3XF4tNjLg\",\r\n"
					+ "    \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkI4RDYzRUNCNThFQTVFNkY0QUFDM0Q1MjQ1NDNCMjI0NjY2OUIwRjgiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJ1TlkteTFqcVhtOUtyRDFTUlVPeUpHWnBzUGcifQ.eyJkYXRhIjoie1wiU2VsbGVyR3N0aW5cIjpcIjM2QUFBQ1Q1MTMxQTFaWVwiLFwiQnV5ZXJHc3RpblwiOlwiMzZBQVJQTjczMTlMM1pYXCIsXCJEb2NOb1wiOlwiNzQ0MjQ1MzY1XCIsXCJEb2NUeXBcIjpcIklOVlwiLFwiRG9jRHRcIjpcIjE4LzA1LzIwMjNcIixcIlRvdEludlZhbFwiOjc4OTIuMTIsXCJJdGVtQ250XCI6MixcIk1haW5Ic25Db2RlXCI6XCI4NTE3NjI5MFwiLFwiSXJuXCI6XCIwZGI5ZmU3NWZlNDAwMzE0ZjhhNDI4NTFlNjYyODAyNTYyMWIxMDMwYWRiMzc2MDA1ZTljYWU4OWIzOTVmMjg4XCIsXCJJcm5EdFwiOlwiMjAyMy0wNS0xOCAxNTo1MzowMFwifSIsImlzcyI6Ik5JQyJ9.n0YON87_lVHBfWN-QJwwPDRc-fubtUhOqxYdCWcVM_luyzTQyfHpeiJy0O9tC_OLTe2KnS8-aPkKTdoAfFf8pnls1ov0jjmLGUG7C_7wwFwrrUgpE3tDV39L4dR1qb6wr14m6EP8bzJeXu4F0aVL8rXOy1_YkFBibyiROYiDoI0kWe09ghlH6YqfJEdpdbiqSb5eJesJg0YNGySxAo8s-QjAOjI-YGTBeUlMuDO_qQG6YZX0a_pjm2S5o-LTdw_b-qhY_IMHEgelWxEpRiD-kVb1q1TH_sxaW2y-pKfNJROLlG5nHC26LzG8MTO3rF4sK8D2gwNBMRlKU3XF4tNjLg";
			try {
				Claims claims = Jwts.parserBuilder()

						.setSigningKey(publickey) // Use the RSA public key you obtained earlier
						.build().parseClaimsJws(jwtToken).getBody();

				// You can access the claims in the JWT token here
				System.out.println("JWT claims: " + claims);

			} catch (Exception e) {
				e.printStackTrace();
				// JWT token validation failed
			}

//			SignatureAlgorithm sa = SignatureAlgorithm.RS256;
//
//			SecretKeySpec secretKeySpec = new SecretKeySpec(pubkey.getEncoded(), sa.getJcaName());
//
//			DefaultJwtSignatureValidator validator = new DefaultJwtSignatureValidator(sa, secretKeySpec);
//
//			if (!validator.isValid(key1 + "." + key2, key3)) {
//				new Exception("Could not verify JWT token integrity!");
//			}
//
//			System.out.println(" SUccessfully enerated publickey !!!!");
		} catch (Exception e) {
			e.printStackTrace();

		}

		return null;

	}

	RSAPublicKey getLocalPublicKey() {
		try {
			URL resource = getClass().getClassLoader().getResource("einvoice_2022_public.pem");
			File ff = new File(resource.toURI());
			FileReader fileReader = new FileReader(ff);
			PEMParser pemParser = new PEMParser(fileReader);

			JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
			RSAPublicKey publicKey = (RSAPublicKey) converter
					.getPublicKey((SubjectPublicKeyInfo) pemParser.readObject());

			return publicKey;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	boolean validateToken(RSAPublicKey publicKey, String jwtToken) {

		try {
			Claims claims = Jwts.parserBuilder().setSigningKey(publicKey) // Use the RSA public key you obtained earlier
					.build().parseClaimsJws(jwtToken).getBody();

			// You can access the claims in the JWT token here
			System.out.println("JWT claims: " + claims);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

}
