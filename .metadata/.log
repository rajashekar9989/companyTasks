!SESSION 2023-10-10 12:26:40.788 -----------------------------------------------
eclipse.buildId=4.19.0.202306150758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file C:\Users\admn\Documents\workspace-sts-project\.metadata\.bak_0.log
Created Time: 2023-10-10 16:49:10.746

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:49:10.746
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:52:50.085
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 16:55:11.282
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 16:55:41.575
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:55:44.075
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:56:32.178
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:56:52.068
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:58:23.617
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:59:25.783
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 16:59:52.489
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 17:01:24.535
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:22:11.093
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:24:18.686
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 17:24:20.441
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 17:24:25.099
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:25:02.440
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 17:25:18.291
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:25:22.097
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 17:26:04.046
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:26:35.521
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:27:48.614
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:28:13.589
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:28:18.597
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:28:35.190
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:29:01.377
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:35:16.294
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:36:27.024
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:37:41.792
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:37:58.304
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:39:14.328
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:39:24.259
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:39:53.211
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 17:40:08.017
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:01:32.741
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:03:22.257
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:05:02.191
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:06:03.212
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:07:38.958
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:12:47.551
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:13:21.759
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:14:21.353
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:14:29.362
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:15:21.442
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:15:26.229
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:15:31.010
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:15:37.869
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:15:43.136
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:15:46.603
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:16:04.383
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:18:02.067
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:18:14.609
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:19:07.706
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:19:25.917
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:19:42.128
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:20:26.398
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:21:51.752
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:22:42.581
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:24:03.788
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:24:22.187
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:27:56.317
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:29:00.634
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:29:17.056
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:30:35.056
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:30:38.632
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:31:05.152
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:31:09.930
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:32:02.770
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:32:14.536
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:32:30.401
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:32:38.926
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:32:41.663
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:32:55.443
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:32:58.866
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:33:18.363
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:33:30.950
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:33:40.315
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:33:56.521
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:33:58.683
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:35:05.241
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:35:20.239
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:35:40.362
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:35:48.742
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:46:10.643
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:46:16.745
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:46:22.704
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:46:24.962
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 18:46:36.522
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:46:39.981
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 18:52:34.003
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:00:00.640
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:02:52.600
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 19:03:54.270
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:03:56.679
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 19:07:54.138
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:09:45.124
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:10:21.340
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:11:39.871
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:12:08.789
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:15:28.564
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:15:59.812
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 19:16:13.173
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:16:25.850
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:18:35.231
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-10 19:18:54.998
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:18:59.053
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:21:10.210
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:21:35.394
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:21:51.337
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:22:15.429
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:22:29.439
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:34:53.599
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-10 19:36:12.438
!MESSAGE Classpath changed for project: Ocr
!SESSION 2023-10-11 10:00:10.811 -----------------------------------------------
eclipse.buildId=4.19.0.202306150758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.emf.ecore 2 0 2023-10-11 10:00:14.756
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY org.eclipse.core.resources 2 10035 2023-10-11 10:00:17.513
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2023-10-11 10:00:35.272
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-10-11 10:00:35.272
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2023-10-11 10:00:40.574
!MESSAGE Command list starting LS: org.springframework.tooling.boot.ls
START:
C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_17.0.7.v20230425-1502\jre\bin\javaw.exe
-cp
C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\classes;C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\lib\*
-Dsts.lsp.client=eclipse
-Dlsp.completions.indentation.enable=true
-Xmx1024m
-XX:+HeapDumpOnOutOfMemoryError
-XX:TieredStopAtLevel=1
-Xlog:jni+resolve=off
-Dspring.config.location=file:C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\classes\application.properties
-XX:ErrorFile=C:/Users/admn/Documents/workspace-sts-project/.metadata/.plugins/org.springframework.tooling.boot.ls/fatal-error-spring-boot_1696998640573
org.springframework.ide.vscode.boot.app.BootLanguageServerBootApp
--languageserver.hover-timeout=225
END

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:40.575
!MESSAGE DelegatingStreamConnectionProvider - Starting Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2023-10-11 10:00:40.619
!MESSAGE Started org.springframework.tooling.boot.ls LS process 10908

!ENTRY org.eclipse.lsp4e 4 0 2023-10-11 10:00:41.245
!MESSAGE org.springframework.ide.vscode.commons.protocol.spring.SpringModelLanguageServer cannot be found by org.springframework.tooling.boot.ls_1.47.0.202306150731
!STACK 0
java.lang.ClassNotFoundException: org.springframework.ide.vscode.commons.protocol.spring.SpringModelLanguageServer cannot be found by org.springframework.tooling.boot.ls_1.47.0.202306150731
	at org.eclipse.osgi.internal.loader.BundleLoader.generateException(BundleLoader.java:541)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:536)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.loadClass(EquinoxBundle.java:622)
	at org.eclipse.lsp4e.LanguageServersRegistry$ExtensionLanguageServerDefinition.getServerInterface(LanguageServersRegistry.java:196)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$1(LanguageServerWrapper.java:291)
	at java.base/java.util.concurrent.CompletableFuture$UniRun.tryFire(CompletableFuture.java:787)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.egit.ui 2 0 2023-10-11 10:00:42.595
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\admn'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:43.397
!MESSAGE Boot project ADDED: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:43.403
!MESSAGE Starting Boot LS...

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:43.418
!MESSAGE Started Boot LS process

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:43.419
!MESSAGE Boot project ADDED: ScanPdf

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:43.594
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:00:50.873
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:02:07.605
!MESSAGE Classpath changed for project: ScanPdf

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:02:07.606
!MESSAGE Boot project REMOVED: ScanPdf

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:02:11.342
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:02:11.810
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:08:48.715
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:11:38.799
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:12:48.761
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:13:35.211
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:13:54.447
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:13:58.094
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:15:36.885
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:17:00.042
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:17:10.081
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:19:04.212
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:19:09.549
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:21:20.909
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:21:37.868
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:22:10.448
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:23:46.258
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:23:53.146
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:24:40.623
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:24:59.831
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:25:23.058
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:25:41.863
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:29:25.274
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:29:29.109
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:31:17.128
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:32:17.643
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:33:52.537
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:34:26.395
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:34:55.775
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:42:56.738
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:45:00.266
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:45:30.590
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:46:10.681
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:49:23.200
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:50:10.219
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 10:52:24.518
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:54:01.860
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 10001 2023-10-11 10:59:32.908
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): isSignValid(boolean, RepsonseData) [in QRCodeExtractor [in [Working copy] QRCodeExtractor.java [in scanqrcodeFromPdf [in src/main/java [in Ocr]]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SourceRefElement.getSourceRange(SourceRefElement.java:233)
	at org.eclipse.jdt.internal.core.Member.getJavadocRange(Member.java:301)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContentFromSource(JavadocContentAccess2.java:645)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:521)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:753)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2023-10-11 10:59:32.909
!MESSAGE isSignValid(boolean, RepsonseData) [in QRCodeExtractor [in [Working copy] QRCodeExtractor.java [in scanqrcodeFromPdf [in src/main/java [in Ocr]]]]] does not exist

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 10:59:32.910
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:00:51.948
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:01:42.135
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:04:11.384
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:05:54.675
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:05:58.180
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:08:37.444
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:11:12.350
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 11:12:00.005
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:13:31.017
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:13:54.991
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:16:31.010
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:20:20.351
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:26:20.865
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:26:44.799
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:28:24.695
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:28:37.265
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:29:05.635
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:29:25.898
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:30:25.599
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:31:30.413
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:32:16.010
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:33:35.894
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:34:14.937
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:35:18.812
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:35:57.270
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:36:33.717
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:37:31.302
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:38:59.147
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:40:43.527
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:46:03.133
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:47:06.092
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:50:43.417
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:51:55.997
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:52:20.180
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 11:52:33.567
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:05:59.157
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:11:40.914
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:11:51.063
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:12:36.639
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:13:01.886
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:13:19.046
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:17:55.394
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.jface 2 0 2023-10-11 12:18:43.241
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-10-11 12:18:43.241
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		WorkbenchHandlerServiceHandler("org.springframework.tooling.boot.ls.ToggleComment"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:18:45.123
!MESSAGE Could not get hover region due to timeout after 1000 miliseconds
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.getHoverRegion(LSPTextHover.java:155)
	at org.eclipse.ui.internal.genericeditor.hover.CompositeTextHover.getHoverRegion(CompositeTextHover.java:101)
	at org.eclipse.jface.text.TextViewerHoverManager.computeInformation(TextViewerHoverManager.java:128)
	at org.eclipse.jface.text.AbstractInformationControlManager.doShowInformation(AbstractInformationControlManager.java:1101)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager$MouseTracker.mouseHover(AbstractHoverInformationControlManager.java:511)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:212)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4072)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3660)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:18:46.152
!MESSAGE Could not get hover information due to timeout after 1000 miliseconds
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.operations.hover.LSPTextHover.getHoverInfo(LSPTextHover.java:76)
	at org.eclipse.ui.internal.genericeditor.hover.CompositeTextHover.getHoverInfo2(CompositeTextHover.java:60)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:19:34.689
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:20:28.203
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:20:51.698
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:20:56.195
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:28:11.015
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:28:25.956
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:29:39.603
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:30:31.963
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:30:39.300
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 12:32:40.590
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:33:31.773
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:49:02.411
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:50:37.493
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:51:27.228
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:52:33.392
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:31.919
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:57:31.924
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:57:31.926
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:37.802
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:37.805
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:37.806
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:38.528
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:57:38.530
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:57:38.532
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:47.744
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:47.747
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:47.749
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:47.776
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:47.777
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:47.778
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:47.800
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:47.801
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:47.802
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:56.413
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:56.417
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:56.419
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:56.452
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:56.454
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:56.455
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:57:56.481
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:57:56.483
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:57:56.484
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:15.138
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:15.142
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:15.145
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:15.180
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:15.182
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:15.183
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:15.205
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:15.206
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:15.207
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:25.357
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:25.360
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:25.362
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:28.592
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:28.595
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:28.596
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:28.622
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:28.624
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:28.625
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:28.646
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:28.647
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:28.647
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:37.276
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:37.279
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:37.281
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:39.520
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:39.522
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:39.524
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:43.604
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:43.607
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:43.608
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:44.689
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:44.691
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:44.692
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 12:58:44.852
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:45.363
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:45.364
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:45.365
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:45.755
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:45.758
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:45.760
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:45.796
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:45.798
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:45.799
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:45.827
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:45.829
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:45.830
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:47.330
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:47.333
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:47.335
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1008)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:804)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:748)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:671)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:663)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:47.366
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-10-11 12:58:47.368
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-10-11 12:58:47.369
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:47.389
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-10-11 12:58:47.391
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:53.128
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:53.130
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:53.132
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:54.510
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:54.513
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:54.516
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:55.500
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		//  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:55.503
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:55.505
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-10-11 12:58:56.766
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package scanqrcodeFromPdf;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.security.interfaces.RSAPublicKey;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.imageio.ImageIO;
import org.apache.commons.io.FileUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.json.JSONObject;
import com.google.gson.Gson;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

public class QRCodeExtractor {

	public static void main(String[] args) {
		try {

			File sourceFile = new File("C:\\Users\\admn\\Downloads\\Invoice_sample (2)[68].pdf");
			InputStream fileInputstream = new FileInputStream(sourceFile);
			byte[] arr = Files.readAllBytes(sourceFile.toPath());
			File imageFile = new File("C:\\Users\\admn\\Downloads\\Raj.JPG");//shekar.data.png
			byte[] img = FileUtils.readFileToByteArray(imageFile);
			RequestPayload requestPayload = new RequestPayload();
			requestPayload.setFileExtensionType(Enums.FileExtensionType.JPEG);
			requestPayload.setScanMode(Enums.ScanMode.QRCODE);
			requestPayload.setDocType(Enums.DocType.E_INVOICE);
			requestPayload.setScandata(Enums.ScanData.DECODED_DATA);
			requestPayload.setInputType(Enums.InputType.BYTEARRAY);
			requestPayload.setValidateSign(true);
			requestPayload.setInputStream(fileInputstream);
			// requestPayload.setByteArray(arr);
			requestPayload.setByteArray(img);

			DecodedData decodedData = new DecodedData();
			decodedData.setPublicKey(
					"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA35ECb3t4DSCq3Wo4LONh3/jF+1k/S0MEareXFww+mm4AgymHheAWqhIGFQV6fbw2t/ZnG4TULXgYwBUCUffj+bqYAsvo2QyF9hbieGY2SDSieToUmyh8gtJZn0MG04d0NgFjunmnM/7ROkEAOXFvNDizO1NiKiOPbuLIOCrDvQdu48HNUR8Yg0pcMaOnBGVwasv4UIfMZXbBzjwngbwzK8M9jhp4y6xqsmF+wmFZhVpRhIa6nRDkedgroU5IlR/ntqDAhzk/p7zu2btAzA47HltfsGratEqFIBsj/ug+YFZh+8QOzbp2fizOo6DUdbYyJL7lxtEOdOI7ibKccnvlnQIDAQAB");
			requestPayload.setDecodedData(decodedData);

			// PDF QR Code Response Data

			ResponseData responseData = inputDataFromUser(requestPayload);
			Gson gson = new Gson();
			String json = gson.toJson(responseData);
			System.out.println("Response Data => \n" + json);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static String decodeQRCode(BufferedImage image) {
		try {

			LuminanceSource source = new BufferedImageLuminanceSource(image);
			BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
			Result result = new MultiFormatReader().decode(bitmap);
			return result.getText();

		} catch (NotFoundException e) {
			// QR code not found in the image
			e.printStackTrace();
			return null;
		}

	}
	private static String decodeE_QRCode(BufferedImage image) {
		
		  File file = new File("path_to_your_qr_code.png");
          BufferedImage image = ImageIO.read(file);
          BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
          Result result = new MultiFormatReader().decode(binaryBitmap);
          System.out.println("QR Code data: " + result.getText());
       catch (IOException | NotFoundException e) {
          e.printStackTrace();
      }
		
	}
	
	
	

	static ResponseData getDataFromPDFFile(byte[] data, boolean isValidate, DecodedData decodedData) {
		ResponseData responseData = new ResponseData();

		try {
			List<ResObj> resObjs = new ArrayList();
			PDDocument document = Loader.loadPDF(data);
			PDFRenderer pdfRenderer = new PDFRenderer(document);
			// Loop through each page in the PDF
			for (int page = 0; page < document.getNumberOfPages(); ++page) {
				// Render the page as an image
				ResObj resObj = new ResObj();
				BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
				// Decode QR code from the image
				String qrCodeData = decodeQRCode(image);
				if(qrCodeData== null) {
					
					responseData.setMessage("Not A valid QR Code");
					responseData.setStatus(1);
					
					return responseData;
				}
				
				resObj.setRawData(qrCodeData);
				System.out.println("QR  code EXtracted data From Pdf File : " + qrCodeData);

				boolean isJwtString = JwtDataUtilityClass.isJWTString(qrCodeData);
				resObj.setQRContainsJWT(isJwtString);

				if (isJwtString && isValidate) {
					String[] qrData = qrCodeData.split("\\.");
					byte[] mydata = Base64.getDecoder().decode(qrData[1]);
					String content = new String(mydata, "UTF-8");

					Gson gson = new Gson();
					JSONObject jsonObject = new JSONObject(content);
					DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
							DecodeResponseData.class);
					resObj.setDecodeResponseData(decodeResponseData);
					RSAPublicKey key = JwtDataUtilityClass.generateKey(decodedData.getPublicKey());
					resObj.setEsignValid(JwtDataUtilityClass.validateToken(key, qrCodeData));

				}

				resObjs.add(resObj);
			}
			// Close the PDF document
			document.close();
			responseData.setData(resObjs);
			responseData.setStatus(0);
			responseData.setMessage("Byte array extracted data successfully!!");
			return responseData;
		} catch (Exception e) {
			e.printStackTrace();
			responseData.setMessage(e.getMessage());
			responseData.setStatus(1);
		}
		return responseData;
	}

	private static ResponseData inputDataFromUser(RequestPayload reqpayload) {

		ResponseData responseData = new ResponseData();

		if (Enums.ScanMode.QRCODE.equals(reqpayload.getScanMode())) {

			responseData = scanData(reqpayload, reqpayload.isValidateSign());

		}

		else {
			// Barcode Case
			responseData.setStatus(1);
			responseData.setMessage("Barcode validation is not imlplemented yet!");
		}
		return responseData;
	}

	private static ResponseData scanData(RequestPayload requestPayload, boolean signValidate) {
		ResponseData responseData = new ResponseData();
		if (Enums.FileExtensionType.PNG.equals(requestPayload.getFileExtensionType())
				|| (Enums.FileExtensionType.JPEG.equals(requestPayload.getFileExtensionType()))) {

			if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
				try {
					BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(requestPayload.getByteArray()));
					String imgQrData = decodeQRCode(bufferedImage);
					System.out.println("Image QR Data  -->" + imgQrData);
					
					if(imgQrData== null) {
						
						responseData.setMessage("Not A valid QR Code");
						responseData.setStatus(1);
						
						return responseData;
					}
					
					ResObj obj = new ResObj();
					List<ResObj> objs = new ArrayList<>();
					// Decode QR code from the image
					boolean isJwtString = JwtDataUtilityClass.isJWTString(imgQrData);
					obj.setQRContainsJWT(isJwtString);
					String rawData = imgQrData;
					obj.setRawData(rawData);

					if (isJwtString && signValidate) {
						String[] qrData = rawData.split("\\.");
						byte[] mydata = Base64.getDecoder().decode(qrData[1]);
						String content = new String(mydata, "UTF-8");
						Gson gson = new Gson();
						JSONObject jsonObject = new JSONObject(content);
						DecodeResponseData decodeResponseData = gson.fromJson(jsonObject.getString("data"),
								DecodeResponseData.class);
						obj.setDecodeResponseData(decodeResponseData);

						RSAPublicKey key;
						key = JwtDataUtilityClass.generateKey(requestPayload.getDecodedData().getPublicKey());
						obj.setEsignValid(JwtDataUtilityClass.validateToken(key, rawData));

					}

					objs.add(obj);
					responseData.setData(objs);
					responseData.setStatus(0);
					responseData.setMessage(" Png Byte array extracted data successfully!!");
					return responseData;
				} catch (Exception e) {
					e.printStackTrace();
					responseData.setMessage(e.getMessage());
					responseData.setStatus(1);
				}
				return responseData;
			}
		}
		if (!Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			responseData.setStatus(1);
			responseData.setMessage("Provided file extension was not supported!!");
			return responseData;
		}

		if (Enums.InputType.INPUTSTRAM.equals(requestPayload.getInputType())
				&& Enums.FileExtensionType.PDF.equals(requestPayload.getFileExtensionType())) {
			try {
				InputStream fileInputstream = requestPayload.getInputStream();
				byte[] byteArray = fileInputstream.readAllBytes();
				responseData = getDataFromPDFFile(byteArray, signValidate, requestPayload.getDecodedData());
				responseData.setMessage(" PDF FILE Inputstream Data extracted Successfully!!");
				return responseData;
			} catch (Exception e) {
				e.printStackTrace();
				responseData.setStatus(1);
				responseData.setMessage(e.getMessage());
				return responseData;
			}
		} else if (Enums.InputType.BYTEARRAY.equals(requestPayload.getInputType())) {
			return getDataFromPDFFile(requestPayload.getByteArray(), signValidate, requestPayload.getDecodedData());
		}

		return null;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-10-11 12:58:56.768
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-10-11 12:58:56.770
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3919)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3161)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3456)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:584)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:02:11.979
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:02:29.911
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:02:56.959
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:03:40.379
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:04:14.786
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:04:52.831
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 13:06:40.500
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 13:07:06.645
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 13:07:20.150
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 13:07:24.471
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:07:32.448
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:08:44.541
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 13:08:46.589
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:08:50.582
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 13:51:23.599
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:01:01.402
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:01:40.421
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:09:47.447
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:09:49.578
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:09:54.736
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:11:50.627
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:13:29.303
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:18:16.770
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:18:27.672
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:18:45.864
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:19:05.401
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:19:56.740
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:22:32.093
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:25:31.973
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:25:54.825
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:26:22.212
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:27:30.040
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:27:33.649
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:27:38.457
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:28:27.656
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:29:36.689
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:32:59.118
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:33:33.010
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:34:55.547
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:35:14.095
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:36:00.909
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:36:18.895
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:36:48.636
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:36:51.880
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:45:24.812
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:45:51.405
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:45:56.655
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:46:38.270
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:46:56.674
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:46:59.122
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:51:58.772
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:52:02.561
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:53:34.838
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:56:02.258
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:56:11.414
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:56:21.575
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:56:41.378
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:56:48.759
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:57:06.474
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 14:58:49.336
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 14:58:56.472
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 15:01:10.248
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:01:17.359
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 15:03:09.666
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:03:13.637
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:05:53.057
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:05:55.291
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 15:07:30.054
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:07:33.013
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:22:53.010
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:23:47.825
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:33:30.654
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:36:01.364
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 15:54:44.876
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 15:59:27.198
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 15:59:36.555
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 16:31:30.030
!MESSAGE Classpath changed for project: Ocr

!ENTRY org.eclipse.lsp4e 2 0 2023-10-11 18:42:47.089
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-11 19:01:54.948
!MESSAGE Classpath changed for project: Ocr
!SESSION 2023-10-12 10:06:42.710 -----------------------------------------------
eclipse.buildId=4.19.0.202306150758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY org.eclipse.emf.ecore 2 0 2023-10-12 10:06:48.891
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY org.eclipse.jface 2 0 2023-10-12 10:07:22.741
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-10-12 10:07:22.741
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2023-10-12 10:07:28.875
!MESSAGE Command list starting LS: org.springframework.tooling.boot.ls
START:
C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_17.0.7.v20230425-1502\jre\bin\javaw.exe
-cp
C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\classes;C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\lib\*
-Dsts.lsp.client=eclipse
-Dlsp.completions.indentation.enable=true
-Xmx1024m
-XX:+HeapDumpOnOutOfMemoryError
-XX:TieredStopAtLevel=1
-Xlog:jni+resolve=off
-Dspring.config.location=file:C:\Users\admn\Downloads\sts-4.19.0.RELEASE\plugins\org.springframework.tooling.boot.ls_1.47.0.202306150731\servers\spring-boot-language-server\BOOT-INF\classes\application.properties
-XX:ErrorFile=C:/Users/admn/Documents/workspace-sts-project/.metadata/.plugins/org.springframework.tooling.boot.ls/fatal-error-spring-boot_1697085448874
org.springframework.ide.vscode.boot.app.BootLanguageServerBootApp
--languageserver.hover-timeout=225
END

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-12 10:07:28.877
!MESSAGE DelegatingStreamConnectionProvider - Starting Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2023-10-12 10:07:28.920
!MESSAGE Started org.springframework.tooling.boot.ls LS process 2360

!ENTRY org.eclipse.lsp4e 4 0 2023-10-12 10:07:29.686
!MESSAGE org.springframework.ide.vscode.commons.protocol.spring.SpringModelLanguageServer cannot be found by org.springframework.tooling.boot.ls_1.47.0.202306150731
!STACK 0
java.lang.ClassNotFoundException: org.springframework.ide.vscode.commons.protocol.spring.SpringModelLanguageServer cannot be found by org.springframework.tooling.boot.ls_1.47.0.202306150731
	at org.eclipse.osgi.internal.loader.BundleLoader.generateException(BundleLoader.java:541)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass0(BundleLoader.java:536)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:416)
	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:168)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)
	at org.eclipse.osgi.internal.framework.EquinoxBundle.loadClass(EquinoxBundle.java:622)
	at org.eclipse.lsp4e.LanguageServersRegistry$ExtensionLanguageServerDefinition.getServerInterface(LanguageServersRegistry.java:196)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$1(LanguageServerWrapper.java:291)
	at java.base/java.util.concurrent.CompletableFuture$UniRun.tryFire(CompletableFuture.java:787)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.egit.ui 2 0 2023-10-12 10:07:32.811
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\admn'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-12 10:07:33.127
!MESSAGE Boot project ADDED: Ocr

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-12 10:07:33.129
!MESSAGE Starting Boot LS...

!ENTRY org.springframework.tooling.boot.ls 1 0 2023-10-12 10:07:33.132
!MESSAGE Started Boot LS process
